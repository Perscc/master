# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'user.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys

import cv2
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QImage, QPixmap


class Ui_user_main(object):
    def setupUi(self, user_main):
        user_main.setObjectName("user_main")
        user_main.setEnabled(True)
        user_main.resize(900, 500)
        self.centralwidget = QtWidgets.QWidget(user_main)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(70, 430, 800, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.operation = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.operation.setContentsMargins(0, 0, 0, 0)
        self.operation.setObjectName("operation")
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.operation.addWidget(self.label_6)
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.operation.addWidget(self.label_5)
        self.label_4 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.operation.addWidget(self.label_4)
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.operation.addWidget(self.label_3)
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.operation.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.operation.addWidget(self.label_2)
        self.label_7 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_7.setObjectName("label_7")
        self.operation.addWidget(self.label_7)
        self.cap_img = QtWidgets.QLabel(self.centralwidget)
        self.cap_img.setGeometry(QtCore.QRect(138, -20, 700, 450))
        self.cap_img.setText("")
        self.cap_img.setObjectName("cap_img")
        user_main.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(user_main)
        self.statusbar.setObjectName("statusbar")
        user_main.setStatusBar(self.statusbar)

        self.retranslateUi(user_main)
        self.cap = cv2.VideoCapture(0)
        self.timer = QTimer()
        self.frame_rate = 50
        self.show()
        self.start()
        QtCore.QMetaObject.connectSlotsByName(user_main)

    def retranslateUi(self, user_main):
        _translate = QtCore.QCoreApplication.translate
        user_main.setWindowTitle(_translate("user_main", "MainWindow"))
        self.label_6.setText(_translate("user_main", "left_click"))
        self.label_5.setText(_translate("user_main", "right_click"))
        self.label_4.setText(_translate("user_main", "move_mouse"))
        self.label_3.setText(_translate("user_main", "drag"))
        self.label.setText(_translate("user_main", "down"))
        self.label_2.setText(_translate("user_main", "up"))
        self.label_7.setText(_translate("user_main", "control_vol"))

    def start(self):
        try:
            rate = int(1000.0 / self.frame_rate)
            self.timer.setTimerType(Qt.PreciseTimer)
            self.timer.timeout.connect(self.next_frame_slot)
            self.timer.start(rate)
        except:
            self.release_cap()

    def next_frame_slot(self):
        try:
            ret, frame = self.cap.read()
            if ret == True:
                frame = cv2.flip(frame, flipCode=1)
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = QImage(frame, frame.shape[1], frame.shape[0], QImage.Format_RGB888)
                img = img.scaled(640, 480, Qt.KeepAspectRatio)
                pix = QPixmap.fromImage(img)
                self.cap_img.setPixmap(pix)
        except:
            self.release_cap()

    def release_cap(self):
        self.cap.release()
        self.timer.stop()
        cv2.destroyAllWindows()
        sys.exit(0)
